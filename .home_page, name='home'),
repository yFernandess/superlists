warning: CRLF will be replaced by LF in lists/templates/list.html.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in lists/tests.py.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in lists/views.py.
The file will have its original line endings in your working directory.
warning: CRLF will be replaced by LF in superlists/urls.py.
The file will have its original line endings in your working directory.
[1mdiff --git a/lists/templates/list.html b/lists/templates/list.html[m
[1mindex 804dbf3..f2593b4 100644[m
[1m--- a/lists/templates/list.html[m
[1m+++ b/lists/templates/list.html[m
[36m@@ -4,8 +4,11 @@[m
     </head>[m
     <body>[m
         <h1>Your To-Do list</h1>[m
[31m-        <form method="POST" action="/lists/new">[m
[32m+[m[32m        <form method="POST" action="/lists/{{ list.id }}/add_item">[m
             <input name="item_text" id="id_new_item" placeholder="Enter a to-do item" />[m
[32m+[m[32m            {% for item in list.item_set.all %}[m
[32m+[m[32m                <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>[m
[32m+[m[32m            {% endfor %}[m
             {% csrf_token %}[m
         </form>[m
         <table id="id_list_table">[m
[1mdiff --git a/lists/tests.py b/lists/tests.py[m
[1mindex 9ee0136..6582661 100644[m
[1m--- a/lists/tests.py[m
[1m+++ b/lists/tests.py[m
[36m@@ -39,18 +39,30 @@[m [mclass ListAndItemModelsTest(TestCase):[m
 class ListViewTest(TestCase):[m
 [m
     def test_uses_list_template(self):[m
[31m-        response = self.client.get('/lists/the-only-list-in-the-world/')[m
[31m-        self.assertTemplateUsed(response, 'list.html')[m
[31m-[m
[31m-    def test_displays_all_items(self):[m
         list_ = List.objects.create()[m
[31m-        Item.objects.create(text='itemey 1', list=list_)[m
[31m-        Item.objects.create(text='itemey 2', list=list_)[m
[32m+[m[32m        response = self.client.get(f'/lists/{list_.id}/')[m
[32m+[m[32m        self.assertTemplateUsed(response, 'list.html')[m
 [m
[31m-        response = self.client.get('/lists/the-only-list-in-the-world/')[m
[32m+[m[32m    def test_displays_only_items_for_that_list(self):[m
[32m+[m[32m        correct_list = List.objects.create()[m
[32m+[m[32m        Item.objects.create(text='itemey 1', list=correct_list)[m
[32m+[m[32m        Item.objects.create(text='itemey 2', list=correct_list)[m
[32m+[m[32m        other_list = List.objects.create()[m
[32m+[m[32m        Item.objects.create(text='other list item 1', list=other_list)[m
[32m+[m[32m        Item.objects.create(text='other list item 2', list=other_list)[m
[32m+[m[32m        response = self.client.get(f'/lists/{correct_list.id}/')[m
 [m
         self.assertContains(response, 'itemey 1')[m
         self.assertContains(response, 'itemey 2')[m
[32m+[m[32m        self.assertNotContains(response, 'other list item 1')[m
[32m+[m[32m        self.assertNotContains(response, 'other list item 2')[m
[32m+[m
[32m+[m[32m    def test_passes_correct_list_to_template(self):[m
[32m+[m[32m        other_list = List.objects.create()[m
[32m+[m[32m        correct_list = List.objects.create()[m
[32m+[m[32m        response = self.client.get(f'/lists/{correct_list.id}/')[m
[32m+[m
[32m+[m[32m        self.assertEqual(response.context['list'], correct_list)[m[41m                [m
 [m
 class NewListTest(TestCase):[m
 [m
[36m@@ -62,5 +74,33 @@[m [mclass NewListTest(TestCase):[m
         [m
     def test_redirects_after_POST(self):[m
         response = self.client.post('/lists/new', data={'item_text': 'A new list item'})[m
[31m-        self.assertRedirects(response, '/lists/the-only-list-in-the-world/')[m
[32m+[m[32m        new_list = List.objects.first()[m
[32m+[m[32m        self.assertRedirects(response, f'/lists/{new_list.id}/')[m
[32m+[m
[32m+[m[32mclass NewItemTest(TestCase):[m
[32m+[m
[32m+[m[32m    def test_can_save_a_POST_request_to_an_existing_list(self):[m
[32m+[m[32m        other_list = List.objects.create()[m
[32m+[m[32m        correct_list = List.objects.create()[m
[32m+[m
[32m+[m[32m        self.client.post([m
[32m+[m[32m            f'/lists/{correct_list.id}/add_item',[m
[32m+[m[32m            data={'item_text': 'A new item for an existing list'}[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        self.assertEqual(Item.objects.count(), 1)[m
[32m+[m[32m        new_item = Item.objects.first()[m
[32m+[m[32m        self.assertEqual(new_item.text, 'A new item for an existing list')[m
[32m+[m[32m        self.assertEqual(new_item.list, correct_list)[m
[32m+[m
[32m+[m[32m    def test_redirects_to_list_view(self):[m
[32m+[m[32m        other_list = List.objects.create()[m
[32m+[m[32m        correct_list = List.objects.create()[m
[32m+[m
[32m+[m[32m        response = self.client.post([m
[32m+[m[32m            f'/lists/{correct_list.id}/add_item',[m
[32m+[m[32m            data={'item_text': 'A new item for an existing list'}[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m        self.assertRedirects(response, f'/lists/{correct_list.id}/')[m
 [m
[1mdiff --git a/lists/views.py b/lists/views.py[m
[1mindex 75318cb..0c907f4 100644[m
[1m--- a/lists/views.py[m
[1m+++ b/lists/views.py[m
[36m@@ -4,11 +4,16 @@[m [mfrom lists.models import Item, List[m
 def home_page(request):[m
     return render(request, 'home.html')[m
 [m
[31m-def view_list(request):[m
[31m-    items = Item.objects.all()[m
[31m-    return render(request, 'list.html', {'items': items})[m
[32m+[m[32mdef view_list(request, list_id):[m
[32m+[m[32m    list_ = List.objects.get(id=list_id)[m
[32m+[m[32m    return render(request, 'list.html', {'list': list_})[m
 [m
 def new_list(request):[m
     list_ = List.objects.create()[m
     Item.objects.create(text=request.POST['item_text'], list=list_)[m
[31m-    return redirect('/lists/the-only-list-in-the-world/')[m
\ No newline at end of file[m
[32m+[m[32m    return redirect(f'/lists/{list_.id}/')[m
[32m+[m
[32m+[m[32mdef add_item(request, list_id):[m
[32m+[m[32m    list_ = List.objects.get(id=list_id)[m
[32m+[m[32m    Item.objects.create(text=request.POST['item_text'], list=list_)[m
[32m+[m[32m    return redirect(f'/lists/{list_.id}/')[m
\ No newline at end of file[m
[1mdiff --git a/superlists/urls.py b/superlists/urls.py[m
[1mindex 3536b33..2ec2fab 100644[m
[1m--- a/superlists/urls.py[m
[1m+++ b/superlists/urls.py[m
[36m@@ -4,5 +4,6 @@[m [mfrom lists import views[m
 urlpatterns = [[m
     url(r'^$', views.home_page, name='home'),[m
     url(r'^lists/new$', views.new_list, name='new_list'),[m
[31m-    url(r'^lists/the-only-list-in-the-world/$', views.view_list, name='view_list'),[m
[32m+[m[32m    url(r'^lists/(\d+)/$', views.view_list, name='view_list'),[m
[32m+[m[32m    url(r'^lists/(\d+)/add_item$', views.add_item, name='add_item'),[m
 ][m
